import React from 'react'
import { connect } from 'react-redux'
import store from '../../lib/redux/store'
import { withRouteData, Link } from 'react-static'
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Label, ResponsiveContainer } from 'recharts'
//
import './simulator.css'
import { fetchSimData } from '../../lib/redux/entities/simulator/simulator.actions'

class Simulator extends React.Component {
  componentDidMount() {
    const { dispatchFetchSimData } = this.props
    dispatchFetchSimData()
  }
  constructor(props) {
    super(props)
    this.state = {
      dataModel: [
        { x: 0, a: 1.1200003936403289, b: 1.24079, c: 2.239974781275909 },
        { x: 1.1904761904761905, a: 1.120000410506264, b: 1.2407899999999505, c: 2.2399745980164116 },
        { x: 2.380952380952381, a: 1.120000426623123, b: 1.240789999999899, c: 2.239974423467453 },
        { x: 3.571428571428571, a: 1.1200004467815643, b: 1.240789999999831, c: 2.2399742056237337 },
        { x: 4.761904761904762, a: 1.1200004657630653, b: 1.2407899999997603, c: 2.2399740014371834 },
        { x: 5.9523809523809526, a: 1.120000483633099, b: 1.2407899999996865, c: 2.2399738101183146 },
        { x: 7.142857142857142, a: 1.1200005004334221, b: 1.2407899999996101, c: 2.2399736311370813 },
        { x: 8.333333333333334, a: 1.1200005162434528, b: 1.2407899999995313, c: 2.239973463566645 },
        { x: 9.523809523809524, a: 1.1200005311177277, b: 1.24078999999945, c: 2.2399733067519785 },
        { x: 10.714285714285714, a: 1.1200005451139208, b: 1.2407899999993666, c: 2.2399731600105746 },
        { x: 11.904761904761905, a: 1.120000558274135, b: 1.2407899999992809, c: 2.2399730228284125 },
        { x: 13.095238095238095, a: 1.1200005706446923, b: 1.2407899999991931, c: 2.2399728946513195 },
        { x: 14.285714285714285, a: 1.1200005896085214, b: 1.2407899999990435, c: 2.2399726997821734 },
        { x: 15.476190476190476, a: 1.1200006066918404, b: 1.240789999998889, c: 2.2399725261963583 },
        { x: 16.666666666666668, a: 1.120000622066464, b: 1.2407899999987304, c: 2.2399723718499054 },
        { x: 17.857142857142858, a: 1.120000676433732, b: 1.2407899999979182, c: 2.239971847796276 },
        { x: 19.047619047619047, a: 1.120000681232232, b: 1.2407899999978176, c: 2.239971803705395 },
        { x: 20.238095238095237, a: 1.1200006857250109, b: 1.2407899999977163, c: 2.239971762924233 },
        { x: 21.428571428571427, a: 1.1200006899318096, b: 1.2407899999976144, c: 2.2399717252211704 },
        { x: 22.61904761904762, a: 1.1200006938685154, b: 1.2407899999975118, c: 2.2399716904117097 },
        { x: 23.80952380952381, a: 1.1200006977129782, b: 1.240789999997404, c: 2.2399716569099777 },
        { x: 25, a: 1.120000701294686, b: 1.2407899999972956, c: 2.239971626195393 },
        { x: 26.19047619047619, a: 1.1200007046289944, b: 1.2407899999971865, c: 2.239971598090857 },
        { x: 27.38095238095238, a: 1.1200007189273347, b: 1.2407899999966063, c: 2.2399714837604745 },
        { x: 28.57142857142857, a: 1.1200007285276765, b: 1.2407899999960166, c: 2.239971417195697 },
        { x: 29.761904761904763, a: 1.1200007346271679, b: 1.2407899999954204, c: 2.2399713849616414 },
        { x: 30.952380952380953, a: 1.1200007394893383, b: 1.2407899999941088, c: 2.2399713931321377 },
        { x: 32.142857142857146, a: 1.1200007386301372, b: 1.240789999992792, c: 2.239971446072041 },
        { x: 33.333333333333336, a: 1.120000736338262, b: 1.2407899999914793, c: 2.2399715000750575 },
        { x: 34.523809523809526, a: 1.1200007340108855, b: 1.2407899999901721, c: 2.23997154400093 },
        { x: 35.714285714285715, a: 1.1200007319216332, b: 1.2407899999888699, c: 2.239971578576218 },
        { x: 36.904761904761905, a: 1.1200007300842951, b: 1.2407899999875716, c: 2.2399716064757706 },
        { x: 38.095238095238095, a: 1.1200007285021922, b: 1.2407899999862761, c: 2.239971629663913 },
        { x: 39.285714285714285, a: 1.12000072597828, b: 1.2407899999834993, c: 2.2399716685767364 },
        { x: 40.476190476190474, a: 1.1200007244321932, b: 1.24078999998073, c: 2.239971702304017 },
        { x: 41.666666666666664, a: 1.1200007234929776, b: 1.2407899999779652, c: 2.239971738884942 },
        { x: 42.857142857142854, a: 1.1200007228492852, b: 1.2407899999752035, c: 2.2399717824766903 },
        { x: 44.047619047619044, a: 1.1200007215006744, b: 1.2407899999670222, c: 2.2399719530596407 },
        { x: 45.23809523809524, a: 1.1200007204133133, b: 1.2407899999588539, c: 2.2399721789555778 },
        { x: 46.42857142857143, a: 1.120000719437728, b: 1.240789999950697, c: 2.2399724424620175 },
        { x: 47.61904761904762, a: 1.1200007175569058, b: 1.2407899999338254, c: 2.23997306179536 },
        { x: 48.80952380952381, a: 1.1200007156918221, b: 1.2407899999169985, c: 2.239973709763731 },
        { x: 50, a: 1.1200007138675143, b: 1.240789999900214, c: 2.2399743425806333 },
        { x: 51.19047619047619, a: 1.120000712136325, b: 1.240789999883471, c: 2.239974954124599 },
        { x: 52.38095238095238, a: 1.1200007079222856, b: 1.240789999840135, c: 2.2399764693707067 },
        { x: 53.57142857142857, a: 1.1200007040269842, b: 1.2407899997970444, c: 2.239977866262642 },
        { x: 54.76190476190476, a: 1.1200007003664287, b: 1.2407899997541847, c: 2.2399791507519757 },
        { x: 55.95238095238095, a: 1.1200006937613844, b: 1.2407899996715661, c: 2.2399813593545437 },
        { x: 57.14285714285714, a: 1.1200006877269932, b: 1.240789999589695, c: 2.239983227945658 },
        { x: 58.333333333333336, a: 1.120000682162773, b: 1.2407899995085123, c: 2.2399848048425506 },
        { x: 59.523809523809526, a: 1.1200006699339662, b: 1.2407899992906823, c: 2.2399874645603512 },
        { x: 60.714285714285715, a: 1.1200006596702383, b: 1.24078999907619, c: 2.2399892517590474 },
        { x: 61.904761904761905, a: 1.1200006449398168, b: 1.2407899986673332, c: 2.2399909925175883 },
        { x: 63.095238095238095, a: 1.120000633989172, b: 1.2407899982654185, c: 2.2399918311835796 },
        { x: 64.28571428571429, a: 1.1200006225876507, b: 1.240789997642479, c: 2.239992283747002 },
        { x: 65.47619047619048, a: 1.1200006148845747, b: 1.240789997027247, c: 2.2399924243497376 },
        { x: 66.66666666666667, a: 1.1200006057401253, b: 1.240789996087817, c: 2.2399925360836317 },
        { x: 67.85714285714286, a: 1.1200006005997905, b: 1.2407899951587589, c: 2.239992553673661 },
        { x: 69.04761904761905, a: 1.1200005972232674, b: 1.2407899942366405, c: 2.239992611224001 },
        { x: 70.23809523809524, a: 1.120000592767338, b: 1.240789992613317, c: 2.2399927959290262 },
        { x: 71.42857142857143, a: 1.1200005868958833, b: 1.240789991005206, c: 2.2399930353947455 },
        { x: 72.61904761904762, a: 1.120000578797516, b: 1.240789989414857, c: 2.2399932262273756 },
        { x: 73.80952380952381, a: 1.1200005693639106, b: 1.2407899878470972, c: 2.23999334930985 },
        { x: 75, a: 1.1200005416588283, b: 1.2407899838422551, c: 2.2399935946839236 },
        { x: 76.19047619047619, a: 1.1200005105450734, b: 1.2407899800526516, c: 2.2399937672272827 },
        { x: 77.38095238095238, a: 1.1200004767633054, b: 1.2407899764972141, c: 2.239993906136945 },
        { x: 78.57142857142857, a: 1.1200003228422626, b: 1.2407899664930993, c: 2.2399944380443264 },
        { x: 79.76190476190476, a: 1.1200001804076216, b: 1.2407899609026956, c: 2.2399950137001485 },
        { x: 80.95238095238095, a: 1.1199999984598388, b: 1.2407899609816069, c: 2.2399959761485455 },
        { x: 82.14285714285714, a: 1.119999871315596, b: 1.2407899675748446, c: 2.2399968530344787 },
        { x: 83.33333333333333, a: 1.1199997727500166, b: 1.240789987190152, c: 2.23999795482721 },
        { x: 84.52380952380952, a: 1.1199997480769894, b: 1.2407900089351362, c: 2.239998717176801 },
        { x: 85.71428571428571, a: 1.1199998007790195, b: 1.2407900403144994, c: 2.239999441027869 },
        { x: 86.9047619047619, a: 1.1199998803374964, b: 1.24079005916258, c: 2.239999817721029 },
        { x: 88.09523809523809, a: 1.1200000026755366, b: 1.2407900583733151, c: 2.2400000945278293 },
        { x: 89.28571428571429, a: 1.120000080337274, b: 1.2407900346743734, c: 2.240000208360932 },
        { x: 90.47619047619048, a: 1.1200001247580484, b: 1.2407899697775715, c: 2.240000246631228 },
        { x: 91.66666666666667, a: 1.120000121949251, b: 1.240789906341855, c: 2.2400002255390836 },
        { x: 92.85714285714286, a: 1.1200000805560042, b: 1.2407898294637718, c: 2.240000155122438 },
        { x: 94.04761904761905, a: 1.1200000437136288, b: 1.240789787745962, c: 2.2400000980105137 },
        { x: 95.23809523809524, a: 1.1200000066359856, b: 1.2407897690363476, c: 2.240000034069764 },
        { x: 96.42857142857143, a: 1.1199999973388735, b: 1.240789776539171, c: 2.2400000094821726 },
        { x: 97.61904761904762, a: 1.1199999963510863, b: 1.2407898157591477, c: 2.239999985491132 },
        { x: 98.80952380952381, a: 1.1199999972201444, b: 1.2407898456381485, c: 2.2399999778970243 },
        { x: 100, a: 1.1199999991187144, b: 1.2407899061212218, c: 2.2399999877289765 }
      ],
      min: 0,
      max: 14
    }
  }

  submit(evt) {
    evt.preventDefault()
    const { dispatchFetchSimData } = this.props
    dispatchFetchSimData()
    console.log('I hope this works')
  }

  create(evt) {
    const time = this.props.simDataRoot.simData.time
    const HEX1 = this.props.simDataRoot.simData.fluxHEX1
    const PYK = this.props.simDataRoot.simData.fluxPYK
    const concentrationsGlcDC = this.props.simDataRoot.simData.concentrationsGlcDC
    const min = Math.min(...HEX1)
    const max = Math.max(...HEX1)
    const data = []
    let i
    for (i = 0; i < time.length; i++) {
      data.push({ x: time[i], a: HEX1[i], b: concentrationsGlcDC[i], c: PYK[i] })
    }
    console.log(data)
    this.setState({
      dataModel: data,
      max,
      min
    })
  }

  click(evt) {
    this.setState({ test1: 'checked' })
  }

  render() {
    console.log(this.state)
    console.log(this.props)

    return (
      <div className="simulator-body">
        <button onClick={this.submit.bind(this)}>Get Data</button>
        <button onClick={this.create.bind(this)}>Create Data</button>
        <div className="chartContainers">
          <div id="metaboliteConcetration">
            <h1>Metabolite Concentration Profiles</h1>
            <ResponsiveContainer width={300} height={300}>
              <LineChart width={300} height={300} data={this.state.dataModel} style={{ overflow: 'unset' }}>
                <XAxis dataKey="x">
                  <Label value="Time (hours)" offset={0} position="bottom" />
                </XAxis>
                <YAxis domain={['dataMin', 'dataMax']} label={{ value: 'Metabolite  Concentration  (mmol)', angle: -90, position: 'center' }} />
                <Tooltip />
                <Line type="monotone" dataKey="a" stroke="#8884d8" />
              </LineChart>
            </ResponsiveContainer>
          </div>
          <div>
            <h3 className="optionsTitle">Metabolites To Plot</h3>
            <div id="metaboliteOptions" className="options">
              <div className="buttonRow">
                <input type="checkbox" onClick={() => this.click.bind(this)} />
                <p>Test</p>
              </div>
            </div>
            <h3 className="plotOptionsTitle">Plot Options</h3>
            <div className="plotOptions" />
          </div>
          <div id="reactionVelocityProfiles">
            <h1>Reaction Velocity Profiles</h1>
            <ResponsiveContainer width={300} height={300}>
              <LineChart width={300} height={300} data={this.state.dataModel} style={{ overflow: 'unset' }}>
                <XAxis dataKey="x">
                  <Label value="Time (hours)" offset={0} position="bottom" />
                </XAxis>
                {/* <YAxis domain={['dataMin', 'dataMax']} label={{ value: 'Metabolite  Concentration  (mmol)', angle: -90, position: 'center' }} />{' '} */}
                <YAxis allowDataOverflow={true} domain={['dataMin', 'dataMax']} type="number" yAxisId="1" />
                <YAxis orientation="right" allowDataOverflow={true} domain={['dataMin', 'dataMax']} type="number" yAxisId="2" />
                <Tooltip />
                <Line yAxisId="1" type="monotone" dataKey="b" stroke="#8884d8" />
                <Line yAxisId="2" type="monotone" dataKey="c" stroke="#82ca9d" />
              </LineChart>
            </ResponsiveContainer>
          </div>
          <div>
            <h3 className="optionsTitle">Metabolites To Plot</h3>
            <div id="reactionVelocityOptions" className="options" />
            <h3 className="plotOptionsTitle">Plot Options</h3>
            <div className="plotOptions" />
          </div>
        </div>
      </div>
    )
  }
}

const mapStateToProps = state => {
  return {
    simDataRoot: state.simDataRoot
  }
}

const mapDispatchToProps = (dispatch, ownProps) => {
  return {
    dispatchFetchSimData: () => dispatch(fetchSimData())
  }
}

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(Simulator)
